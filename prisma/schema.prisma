// This is your Prisma schema file for MongoDB,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

model User {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  username              String         @unique
  displayName           String
  email                 String?        @unique
  passwordHash          String?
  googleId              String?        @unique
  avatarUrl             String?
  bio                   String?
  sessions              Session[]
  posts                 Post[]
  following             Follow[]       @relation("Following")
  followers             Follow[]       @relation("Followers")
  likes                 Like[]
  bookmarks             Bookmark[]
  comments              Comment[]
  receivedNotifications Notification[] @relation("Recipient")
  issuedNotifications   Notification[] @relation("Issuer")

  createdAt DateTime @default(now())

  @@map("users")
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model Follow {
  id          String @id @default(auto()) @map("_id") @db.ObjectId // Add unique ID
  followerId  String @db.ObjectId
  follower    User   @relation("Following", fields: [followerId], references: [id])
  followingId String @db.ObjectId
  following   User   @relation("Followers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {
  id                  String         @id @default(auto()) @map("_id") @db.ObjectId
  content             String
  userId              String         @db.ObjectId
  user                User           @relation(fields: [userId], references: [id])
  attachments         Media[]
  likes               Like[]
  bookmarks           Bookmark[]
  comments            Comment[]
  linkedNotifications Notification[]

  createdAt DateTime @default(now())

  @@map("posts")
}

model Media {
  id     String    @id @default(auto()) @map("_id") @db.ObjectId
  postId String?   @db.ObjectId
  post   Post?     @relation(fields: [postId], references: [id])
  type   MediaType
  url    String

  createdAt DateTime @default(now())

  @@map("post_media")
}

enum MediaType {
  IMAGE
  VIDEO
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  userId  String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  postId  String @db.ObjectId
  post    Post   @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())

  @@map("comments")
}

model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId // Add unique ID
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  postId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
  @@map("likes")
}

model Bookmark {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  postId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("bookmarks")
}

model Notification {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  recipientId String           @db.ObjectId
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id])
  issuerId    String           @db.ObjectId
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id])
  postId      String?          @db.ObjectId
  post        Post?            @relation(fields: [postId], references: [id])
  type        NotificationType
  read        Boolean          @default(false)

  createdAt DateTime @default(now())

  @@map("notifications")
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}
